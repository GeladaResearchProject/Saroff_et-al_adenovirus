---
title: "Adenovirus_github_Jun_23_2025"
output: html_notebook
---

This nb uses a file generated from data_analysis_204_dec.Rmd. Post merging and adding in weaning data, and brings in the new results with 10% threshold.

```{r}
library(dplyr)
library(ggplot2)
library(lmerTest)
library(stringr)
library(ggbeeswarm)
library(reshape2)
library(ggExtra)
library(ggeffects)
library(broom.mixed)
library(lubridate)
library(tidyselect)
library(ggpubr)
library(glmmTMB)
library(performance)
```

```{r}
# read data
adeno_meta_10.1 = read.csv("~/Desktop/Virome/Mapping.csv")
adeno_meta_10.1 = adeno_meta_10.1[(!(adeno_meta_10.1$X.ID == "")),] # remove blanks

# add _ to LID file to match with meta file
adeno_meta_10.1$LID = sub("(.{3})(.*)", "\\1_\\2", adeno_meta_10.1$LID) # capture the first 5 characters as a group ((.{5})) followed by one or more characters in another capture group ((.*)) and then replace with the backreference of first group (\\1) followed by a . followed by second backreference (\\2).

# name the strains
adeno_meta_10.1$Covered_percent = as.numeric(adeno_meta_10.1$Covered_percent)
adeno_meta_10.1$adv1 = ifelse(adeno_meta_10.1$X.ID == "1_LID_105965_147_length_32612_cov_57.813084" & adeno_meta_10.1$Covered_percent >9, 1, 0)
adeno_meta_10.1$adv2 = ifelse(adeno_meta_10.1$X.ID == "2_LID_108406_319_length_33793_cov_3042.057049" & adeno_meta_10.1$Covered_percent >9, 1, 0)
adeno_meta_10.1$adv3 = ifelse(adeno_meta_10.1$X.ID == "3_LID_108304_5458_2674_1100_9120_632_updated" & adeno_meta_10.1$Covered_percent >9, 1, 0)
adeno_meta_10.1$adv4 = ifelse(adeno_meta_10.1$X.ID == "4_LID_107882_345_length_34311_cov_8.59512" & adeno_meta_10.1$Covered_percent >9, 1, 0)
adeno_meta_10.1$adv5 = ifelse(adeno_meta_10.1$X.ID == "5_LID_105867_65_length_34064_cov_12.309771" & adeno_meta_10.1$Covered_percent >9, 1, 0)
adeno_meta_10.1$adv6 = ifelse(adeno_meta_10.1$X.ID == "6_LID_107883_492_length_34868_cov_56.276093" & adeno_meta_10.1$Covered_percent >9, 1, 0)
adeno_meta_10.1$adv7 = ifelse(adeno_meta_10.1$X.ID == "7_LID_105984_101_length_34574_cov_32.439343" & adeno_meta_10.1$Covered_percent >9, 1, 0)

# make binary df
adeno_10 = adeno_meta_10.1 %>% dplyr::select(LID, adv1, adv2, adv3, adv4, adv5, adv6, adv7)

# collapse each samples row
adeno_10 = adeno_10 %>% group_by(LID) %>%
    summarise(adv1 = sum(adv1, na.rm = T),
    adv2 = sum(adv2, na.rm = T), 
    adv3 = sum(adv3, na.rm = T),
    adv4 = sum(adv4, na.rm = T), 
    adv5 = sum(adv5, na.rm = T),
    adv6 = sum(adv6, na.rm = T), 
    adv7 = sum(adv7, na.rm = T))

# richness
adeno_10 = adeno_10 %>%
rowwise() %>%
mutate(richness_10 = sum(adv1,adv2, adv3, adv4, adv5, adv6, adv7, na.rm = T))

# bring in metadata
ad_meta = read.csv("~/Desktop/Virome/adeno_weaning_data.csv")

# merge
ad_meta_10 = merge(ad_meta, adeno_10, by = "LID")

```

Descriptive stats

```{r}
# descriptive stats
length(unique(ad_meta_10$LID)) #248 samples
length(unique(ad_meta_10$Individual)) #43 individuals

# new column for if a sample has any adenovirus
ad_meta_10$any_adeno_10 = ifelse(ad_meta_10$richness_10 >0, 1, 0)

table(ad_meta_10$any_adeno_10) # 48 adenovirus positive samples

# ages
hist(ad_meta_10$AgeMonth)
hist(ad_meta_10$AgeYear)
range(ad_meta_10$AgeYear) # 0.005479452 20.452054790

# now descriptive stats
table(ad_meta_10$any_adeno_10) # 48
(48/(111+136))*100 # 19.4%
table(ad_meta_10$richness_10) # only 41 with 1 adeno, 6 with 2 adeno, 1 with 3 adeno, 201 with no adeno 

# make subsetted df with positive samples
any.ad = ad_meta_10[ad_meta_10$any_adeno_10 == 1,] # this is important 
any.ad$any_adeno_10 = as.factor(any.ad$any_adeno_10)

#sex
table(ad_meta_10$Sex) # f 131 # m 117

## plot percentages by under 6 mo, 6 mo to 18 mo (weaning), weaning to 5 years
ad_meta_10$explore_cat = ifelse(ad_meta_10$AgeMonth <6, "<6 mo",
                                ifelse(ad_meta_10$AgeMonth >=6 & ad_meta_10$AgeMonth <=30, "6 mo - 2.5 years", 
                                       ifelse(ad_meta_10$AgeMonth >30 & ad_meta_10$AgeMonth <=60, "2.5 - 5 years ", ">5 years")))
                                       
# calculate percentages
percent_data_6mo = ad_meta_10 %>%
  group_by(explore_cat, Sex) %>%
  summarise(positive_percentage = mean(any_adeno_10) * 100) %>%
  ungroup()

# Reorder the 6mo factor
percent_data_6mo$explore_cat = factor(percent_data_6mo$explore_cat,
                                         levels = c("<6 mo", "6 mo - 2.5 years", "2.5 - 5 years ", ">5 years"))

# plot percentages by 6 mo category
ggplot(percent_data_6mo, aes(x = explore_cat, y = positive_percentage, fill = Sex)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.7) +
  scale_fill_manual(values = c("M" = "dodgerblue3", "F" = "aquamarine3"), labels = c("M" = "male", "F" = "female"), name = NULL ) + 
  labs(
    title = "", x = "",
    y = "Adenovirus positive (%)",
  ) +
  theme_classic(base_size = 25) + theme(
    legend.position = c(0.95, 0.95),  # Position in top-right corner inside plot
    legend.justification = c("right", "top"))  # Anchor the legend at its top-right
    
# units 
table(ad_meta_10$Unit) # C3 C5  D D1 D2 J1  K M1 M2 T1 Te  V Z3 Z5 
length(unique((ad_meta_10$Unit))) # 14

table(ad_meta_10$explore_cat, ad_meta_10$any_adeno_10, ad_meta_10$Sex)
table(ad_meta_10$explore_cat, ad_meta_10$any_adeno_10)

# get sample numbers
summary = ad_meta_10 %>%
  group_by(explore_cat) %>%
  summarise(
    total_samples = n(),
    total_female_samples = sum(Sex == "F"),
    total_male_samples = sum(Sex == "M"),
    unique_females = n_distinct(Individual[Sex == "F"]),
    unique_males = n_distinct(Individual[Sex == "M"])
  )

# how many changed explore_cat
inds_with_change = ad_meta_10 %>%
  group_by(Individual) %>%
  summarize(n_unique_explore_cat = n_distinct(explore_cat)) %>%
  filter(n_unique_explore_cat > 1)

# Count 
nrow(inds_with_change) # 21

#  changes in explore_cat 
explore_cat_changes = ad_meta_10 %>%
  arrange(Individual, AgeDay) %>%  
  group_by(Individual) %>%
  mutate(
    prev_cat = lag(explore_cat),
    changed = explore_cat != prev_cat
  ) %>%
  filter(!is.na(prev_cat) & changed) %>%
  select(Individual, prev_cat, explore_cat)

summary_changes = explore_cat_changes %>%
  group_by(Individual) %>%
  summarize(n_changes = n())

mean(summary_changes$n_changes) # 1.714286
median(summary_changes$n_changes) # 2

########################### individual line plots ########################### 

# split by Individual
split_ind = split(ad_meta_10, ad_meta_10$Individual)

next_ind = lapply(split_ind, function(x) {
  x$seq = 1:nrow(x)
  return (x)
})

next_ind = do.call(rbind, next_ind)

# bin samples by age
next_ind$bin.age = round(next_ind$AgeMonth)

####### plot any adenovirus (0/1) by sample by individual ####### 

# first subset to nonadults
next_ind_inf = next_ind[(!(next_ind$age.cat.3 == "adult")),]

# plot
p_inf_any = ggplot(next_ind_inf,aes(x=bin.age, y=Individual, color=factor(any_adeno_10)))   + scale_color_manual(values = c("grey88", "dodgerblue3"))+ geom_line(color = "grey88")  + theme_classic() + ggtitle("Any Adenovirus") + theme(legend.position = "none", text = element_text(size = 20)) + xlab("Age in Months")+ geom_point(size = 3) 
q_inf_any = ggMarginal(p_inf_any, type = "densigram", xparams = list(binwidth = 1),groupColour = T, groupFill = T)

# without densigram
q_inf_any1 = ggMarginal(p_inf_any, type = "histogram", xparams = list(binwidth = 1), groupColour = TRUE, groupFill = TRUE)

####### plot adenovirus richness by sample by individual ####### 
next_ind_inf$richness_10 = factor(next_ind_inf$richness_10, 
                                   levels = c("0", "1", "2", "3"))

# plot all non-adults 
p_infant_richness = ggplot(next_ind_inf,aes(x=bin.age, y=Individual, color=factor(richness_10))) + scale_color_manual(values = c("grey88", "lightblue3", "dodgerblue4", "black")) + scale_fill_manual(values = c("grey88", "lightblue3", "dodgerblue4", "black"))  + geom_line(color = "grey88")  + theme_classic() + ggtitle("Adenovirus richness") + theme(text = element_text(size = 20)) + xlab("Age in Months")+ geom_point(size = 3) + labs(color = "richness")
q_infant_richness = ggMarginal(p_infant_richness, type = "densigram", xparams = list(binwidth = 1, alpha = .8),groupColour = T, groupFill = T) 

########################### season plots ########################### 

# plot predicted values from below models (must run models first)
library(ggeffects)
preds = ggpredict(model_all_rich, terms = "MinT30", bias_correction = T)
plot(preds)

# ggplot it
ggplot(preds, aes(x = x, y = predicted)) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = "dodgerblue3", alpha = 0.2) +
  geom_line(color = "Orange", size = 1.2) +
  geom_jitter(data = ad_meta_10, 
              aes(x = MinT30, y = richness_10), 
              inherit.aes = FALSE,
              width = 0.2, height = 0.1, 
              alpha = 0.3, color = "gray50") +
  theme_classic(base_size = 18) +
  labs(x = "Min 30-Day Temperature",
       y = "Predicted Adenovirus Richness") +
  scale_y_continuous(breaks = 0:3, limits = c(0, 3)) +
  theme(axis.title.x = element_text(margin = margin(t = 15)))
```

Model

```{r}

######################################## 
########### 0/1 model ########### 
######################################## 

# model any adeno (0/1) per sample
# model
model_all = glmmTMB(any_adeno_10 ~   Sex + explore_cat  + scale(Rain90) + MinT30+ log(NbReads) + band + 
                       (1|Individual), data = ad_meta_10, family = binomial(link = "logit"))
summary_model = summary(model_all)

# Confidence intervals for log-odds
ci_log_odds = confint(model_all, parm = "beta_", level = 0.95)
# Transform to odds ratios
ci_odds_ratios = exp(ci_log_odds)

# Extract fixed effect estimates (log-odds), standard errors, z-values, and p-values
estimates = summary_model$coefficients$cond[, "Estimate"]
std_errors = summary_model$coefficients$cond[, "Std. Error"]
z_values = summary_model$coefficients$cond[, "z value"]
p_values = summary_model$coefficients$cond[, "Pr(>|z|)"]

# Compute odds ratios
odds_ratios = exp(estimates)

# Merge into one data frame
results = data.frame(
  Predictor = names(odds_ratios),
  Estimate = estimates,
  StdError = std_errors,
  z_value = z_values,
  p_value = p_values,
  OddsRatio = odds_ratios,
  CI_Lower = ci_odds_ratios[, 1],
  CI_Upper = ci_odds_ratios[, 2]
)

# Add inverse odds ratios and their confidence intervals
results = results %>%
  mutate(
    InverseOddsRatio = 1 / OddsRatio,
    IOR_CI_Lower = 1 / CI_Upper,  # Inverse of the upper bound of OR
    IOR_CI_Upper = 1 / CI_Lower   # Inverse of the lower bound of OR
  )

# Round all numeric columns to 3 decimal places
results = results %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

## infants only
ad_meta_10_inf = ad_meta_10[ad_meta_10$explore_cat == "<6 mo" | ad_meta_10$explore_cat == "6 mo - 2.5 years", ]
model_inf = glmmTMB(any_adeno_10 ~   Sex + poly(AgeDay, 2)  + scale(Rain90) + MinT30+ log(NbReads) + band + 
                       (1|Individual), data = ad_meta_10_inf, family = binomial(link = "logit"))

######################################## 
########### Richness model ########### 
######################################## 

model_all_rich = glmmTMB(richness_10 ~ Sex + explore_cat + scale(Rain90) + MinT30 + log(NbReads) + band +
                          (1|Individual),
                          data = ad_meta_10,
                          family = poisson(link = "log"))

# Test for overdispersion
sim_res = simulateResiduals(model_all_rich)
testDispersion(sim_res)

# Extract summary of fixed effects
summary_all_rich = summary(model_all_rich)

# Extract coefficients table (fixed effects)
coef_table = as.data.frame(summary_all_rich$coefficients$cond)

# Rename columns for clarity
colnames(coef_table) = c("Estimate", "StdError", "z_value", "p_value")

# Add predictor names as a proper column (removing rownames)
coef_table$Predictor = rownames(coef_table)
rownames(coef_table) = NULL

# Reorder columns so Predictor is first
coef_table = coef_table %>%
  select(Predictor, everything())

# Round numeric columns to 3 decimal places
coef_table = coef_table %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

#write.csv(coef_table, "~/Desktop/Virome/richness_results.csv")
```


```{r}
# Confidence intervals for log-odds
ci_log_odds = confint(model_all, parm = "beta_", level = 0.95)
# Transform to odds ratios
ci_odds_ratios = exp(ci_log_odds)

# Extract fixed effect estimates (log-odds)
log_odds = fixef(model_all)$cond
# Compute odds ratios
odds_ratios = exp(log_odds)

# merge
results = data.frame(
  Predictor = names(odds_ratios),
  OddsRatio = odds_ratios,
  CI_Lower = ci_odds_ratios[, 1],
  CI_Upper = ci_odds_ratios[, 2]
)
# Add inverse odds ratios and their confidence intervals
results = results %>%
  mutate(
    InverseOddsRatio = 1 / OddsRatio,
    IOR_CI_Lower = 1 / CI_Upper,  # Inverse of the upper bound of OR
    IOR_CI_Upper = 1 / CI_Lower  # Inverse of the lower bound of OR
  )

# Round all numeric columns to 3 decimal places
results = results %>%
  mutate(across(where(is.numeric), ~ round(., 3)))

```


